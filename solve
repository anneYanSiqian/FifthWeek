/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
 var solve = function(board) {
    let m=board.length, n=board[0].length
    let visited = new Array(m).fill(0).map(() => new Array(n).fill(0)) 
    var dfs = (i, j, flag) => {
        if (i<0 || i>=m || j<0 ||j>=n || visited[i][j] || board[i][j] === 'X') return
        visited[i][j] = 1
        if (flag) board[i][j] = 'X'
        dfs(i+1,j,flag)
        dfs(i,j+1,flag)
        dfs(i-1,j,flag)
        dfs(i,j-1,flag)
    }
    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            if ((i === 0 || i === m - 1 || j === 0 || j === n - 1) && board[i][j] === 'O') {
                dfs(i, j, false);
            }
        }
    }
    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            if (i !== 0 && i !== m - 1 && j !== 0 && j !== n - 1 && board[i][j] === 'O') {
                dfs(i, j, true);
            }
        }
    }
    return board
};
